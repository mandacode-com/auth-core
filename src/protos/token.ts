// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v6.30.1
// source: token.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "token";

export enum TokenType {
  ACCESS = 0,
  REFRESH = 1,
  EMAIL_VERIFICATION = 2,
  UNRECOGNIZED = -1,
}

export interface IssueTokenRequest {
  type: TokenType;
  accessTokenPayload?: AccessTokenPayload | undefined;
  refreshTokenPayload?: RefreshTokenPayload | undefined;
  emailVerificationTokenPayload?: EmailVerificationTokenPayload | undefined;
}

export interface IssueTokenResponse {
  token: string;
}

export interface VerifyTokenRequest {
  token: string;
  type: TokenType;
}

export interface VerifyTokenResponse {
  accessTokenPayload?: AccessTokenPayload | undefined;
  refreshTokenPayload?: RefreshTokenPayload | undefined;
  emailVerificationTokenPayload?: EmailVerificationTokenPayload | undefined;
}

export interface AccessTokenPayload {
  uuid: string;
  role: string;
}

export interface RefreshTokenPayload {
  uuid: string;
  role: string;
}

export interface EmailVerificationTokenPayload {
  email: string;
  code: string;
}

export const TOKEN_PACKAGE_NAME = "token";

export interface TokenServiceClient {
  issueToken(request: IssueTokenRequest): Observable<IssueTokenResponse>;

  verifyToken(request: VerifyTokenRequest): Observable<VerifyTokenResponse>;
}

export interface TokenServiceController {
  issueToken(
    request: IssueTokenRequest,
  ): Promise<IssueTokenResponse> | Observable<IssueTokenResponse> | IssueTokenResponse;

  verifyToken(
    request: VerifyTokenRequest,
  ): Promise<VerifyTokenResponse> | Observable<VerifyTokenResponse> | VerifyTokenResponse;
}

export function TokenServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["issueToken", "verifyToken"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TokenService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TokenService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TOKEN_SERVICE_NAME = "TokenService";
